---
swagger: "2.0"
info:
  description: "This is the back-end of the RAMEN Voluntary Association"
  version: "2.0.0"
  title: "Ramen Association"
  contact:
    email: "eduardionut.chirica@mail.polimi.it"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
#host: "localhost:8080"
host: "ramen-website.herokuapp.com"
basePath: "/v2"
tags:
- name: "event"
  description: "Available Event"
- name: "service"
  description: "Service Provided"
- name: "person"
  description: "Person involved in any way inside the association"
- name: "sponsor"
  description: "Sponsor of Events inside the Association"
schemes:
#- "http"
- "https"
paths:
  /events:
    get:
      tags:
      - "event"
      summary: "Events available on the Association"
      description: "List of Events available on the Association. There are three different ways to use this endpoint based on the use of the parameters: \n
      - <ins>No parameter used</ins>: It returns all the Events available on the database; \n
      - <ins>Using the **'search'** parameter</ins>: It returns the Events with a particular title(name), or that contain the 'search' string inside; \n
      - <ins>Using the **'refName'** and **'refSurname'** parameters</ins>: It returns the Events that have a contact reference (Person) with a particular name and/or surname (or containg the specified strings);"
      operationId: "eventsGET"
      produces:
      - "application/json"
      parameters:
      - name: "search"
        in: "query"
        description: "Event search by name"
        required: false
        type: "string"
      - name: "refName"
        in: "query"
        description: "Reference contact name"
        required: false
        type: "string"
      - name: "refSurname"
        in: "query"
        description: "Reference contact surname"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK. A collection of Events"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Event"
  /events/{eventId}:
    get:
      tags:
      - "event"
      summary: "Find Event by ID"
      description: "Returns an Event with the specified ID. The parameter **'eventId'** is mandatory."
      operationId: "eventsEventIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        description: "ID of the event to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "succesful operation"
          schema:
            $ref: "#/definitions/Event"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Event"
  /events/reference:
    get:
      tags:
      - "event"
      summary: "Contact reference for the Event"
      description: "Returns the Contact reference(Person) for the Event with the specified ID. The parameter **'eventId'** is mandatory."
      operationId: "eventsReferenceGET"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "query"
        description: "Event's ID"
        required: true
        type: "integer"
      responses:
        "200":
          description: "The contact reference Person"
          schema:
            $ref: "#/definitions/Person"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Event"
  /events/sponsors:
    get:
      tags:
      - "event"
      summary: "List of the Sponsors for this Event"
      description: "List of the Sponsors that have donated some money for the Event with the specified ID. The parameter **'eventId'** is mandatory."
      operationId: "eventsSponsorsGET"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "query"
        description: "Event's ID"
        required: true
        type: "integer"
      responses:
        "200":
          description: "The collection of Sponsors"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Sponsor"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Event"
  /events/service:
    get:
      tags:
      - "event"
      summary: "Service offered by Event"
      description: "Returns the Service offered by the Event with the specified ID. The parameter **'eventId'** is mandatory."
      operationId: "eventsServiceGET"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "query"
        description: "Event's ID"
        required: true
        type: "integer"
      responses:
        "200":
          description: "The Service"
          schema:
            $ref: "#/definitions/Service"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Event"
  /services:
    get:
      tags:
      - "service"
      summary: "Services available on Events"
      description: "List of Services available on Events.\n There are two different ways to use this endpoint based on the use of the parameters: \n
      - <ins>No parameter used</ins>: It returns all the Service available on the database; \n
      - <ins>Using the **'search'** parameter</ins>: It returns the Services with a particular name, or that contain the 'search' string inside it's name; \n"
      operationId: "servicesGET"
      produces:
      - "application/json"
      parameters:
      - name: "search"
        in: "query"
        description: "Generic text search"
        required: false
        type: "string"
      responses:
        "200":
          description: "A collection of Services"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Service"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Service"
  /services/people:
    get:
      tags:
      - "service"
      summary: "List of the People involeved"
      description: "List of the People involeved/working for the Service with the specified name. The parameter **'serviceName'** is mandatory."
      operationId: "servicesPeopleGET"
      produces:
      - "application/json"
      parameters:
      - name: "serviceName"
        in: "query"
        description: "Service's name"
        required: true
        type: "string"
      responses:
        "200":
          description: "The collection of People"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PersonInvolved"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Service"
  /services/events:
    get:
      tags:
      - "service"
      summary: "List of the Events that offer this Service"
      description: "List of the Events that offer this Service with the specified name. The parameter **'serviceName'** is mandatory."
      operationId: "servicesEventsGET"
      produces:
      - "application/json"
      parameters:
      - name: "serviceName"
        in: "query"
        description: "Service's name"
        required: true
        type: "string"
      responses:
        "200":
          description: "The collection of Events"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Service"
  /people:
    get:
      tags:
      - "person"
      summary: "People working in the Association"
      description: "List of People working in the Association. \n There are two different ways to use this endpoint based on the use of the parameters: \n
      - <ins>No parameter used</ins>: It returns all the People available on the database; \n
      - <ins>Using the **'name'** and/or **'surname'** parameters</ins>: It returns the People with a particular name and/or surname (or containg the specified strings);"
      operationId: "peopleGET"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Person's Name"
        required: false
        type: "string"
      - name: "surname"
        in: "query"
        description: "Person's Surname"
        required: false
        type: "string"
      responses:
        "200":
          description: "A collection of People"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Person"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Person"
  /people/{personId}:
    get:
      tags:
      - "person"
      summary: "Find Person by ID"
      description: "Returns the Person with the specified ID. The parameter **'personId'** is mandatory."
      operationId: "peoplePersonIdGET"
      produces:
      - "application/json"
      parameters:
      - name: "personId"
        in: "path"
        description: "ID of the person to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "succesful operation"
          schema:
            $ref: "#/definitions/Person"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Person"
  /sponsors:
    get:
      tags:
      - "sponsor"
      summary: "Sponsors of Events"
      description: "List of Sponsors that make donations to support Events. \n There are two different ways to use this endpoint based on the use of the parameters: \n
      - <ins>No parameter used</ins>: It returns all the Sponsors available on the database; \n
      - <ins>Using the **'search'** parameter</ins>: It returns the Sponsors with a particular name, or that contain the 'search' string inside it's name; \n"
      operationId: "sponsorsGET"
      produces:
      - "application/json"
      parameters:
      - name: "search"
        in: "query"
        description: "Generic text search"
        required: false
        type: "string"
      responses:
        "200":
          description: "A collection of Sponsors"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Sponsor"
        "404":
          description: "Not Found. You requested a resource that could not be found or does not exist."
        "500":
          description: "Internal server error."
      x-swagger-router-controller: "Sponsor"
definitions:
  Event:
    type: "object"
    required:
    - "city"
    - "contact_reference"
    - "service"
    - "date"
    - "id"
    - "img"
    - "location"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "How to make perfect noodles"
      description:
        type: "string"
        example: "A perfect opportunity to learn how to make noodles from the best\
          \ noodles master."
      img:
        type: "string"
        example: "/pictures/noodles"
      contact_reference:
        $ref: "#/definitions/Person"
      location:
        type: "string"
        example: "Hotel PerfectNoodles"
      city:
        type: "string"
        example: "Milan"
      max_participants:
        type: "integer"
        example: 20
      date:
        type: "string"
        example: "12-05-2020 12:00:00"
      service:
        $ref: "#/definitions/Service"
    title: "Event"
    description: "An Event offered by the Association"
    example:
      contact_reference:
        birthday: "31-05-1990"
        img: "/pictures/ginomirtino"
        role: "apprentice cook"
        gender: "male"
        phone: "3249412355"
        surname: "Mirtino"
        name: "Gino"
        description: "apprentice cook, trying to help during the cooking events"
        id: 6
        email: "gino@gmail.com"
      date: "12-05-2020 12:00:00"
      img: "/pictures/noodles"
      city: "Milan"
      name: "How to make perfect noodles"
      description: "A perfect opportunity to learn how to make noodles from the best\
        \ noodles master."
      location: "Hotel PerfectNoodles"
      id: 0
      max_participants: 20
      service:
        name: "Teach how to do noodles"
        date: "12-05-2020 12:00:00"
        img: "/pictures/noodles_service"
        description: "Teaching how to make noodles from the best cooks."
  Service:
    type: "object"
    required:
    - "date"
    - "img"
    - "name"
    properties:
      name:
        type: "string"
        example: "Teach how to do noodles"
      description:
        type: "string"
        example: "Teaching how to make noodles from the best cooks."
      img:
        type: "string"
        example: "/pictures/noodles_service"
      date:
        type: "string"
        example: "12-05-2020 12:00:00"
    title: "Service"
    description: "An Event offered by the Association"
    example:
      date: "12-05-2020 12:00:00"
      img: "/pictures/noodles_service"
      name: "Teach how to do noodles"
      description: "Teaching how to make noodles from the best cooks."
  Person:
    type: "object"
    required:
    - "description"
    - "email"
    - "id"
    - "name"
    - "role"
    - "surname"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Gino"
      surname:
        type: "string"
        example: "Mirtino"
      img:
        type: "string"
        example: "/pictures/ginomirtino"
      email:
        type: "string"
        example: "gino@gmail.com"
      phone:
        type: "string"
        example: "3249412355"
      description:
        type: "string"
        example: "apprentice cook, trying to help during the cooking events"
      role:
        type: "string"
        example: "apprentice cook"
      birthday:
        type: "string"
        example: "31-05-1990"
      gender:
        type: "string"
        example: "male"
      is_founder:
        type: "boolean"
        example: false
    title: "Person"
    description: "A Person working for the Association"
    example:
      birthday: "31-05-1990"
      img: "/pictures/ginomirtino"
      role: "apprentice cook"
      gender: "male"
      phone: "3249412355"
      surname: "Mirtino"
      name: "Gino"
      description: "apprentice cook, trying to help during the cooking events"
      id: 6
      email: "gino@gmail.com"
      is_founder: false
  PersonInvolved:
    type: "object"
    required:
    - "description"
    - "email"
    - "id"
    - "name"
    - "role"
    - "surname"
    - "commitment_type"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Gino"
      surname:
        type: "string"
        example: "Mirtino"
      img:
        type: "string"
        example: "/pictures/ginomirtino"
      email:
        type: "string"
        example: "gino@gmail.com"
      phone:
        type: "string"
        example: "3249412355"
      description:
        type: "string"
        example: "apprentice cook, trying to help during the cooking events"
      role:
        type: "string"
        example: "apprentice cook"
      birthday:
        type: "string"
        example: "31-05-1990"
      gender:
        type: "string"
        example: "male"
      is_founder:
        type: "boolean"
        example: false
      commitment_type:
        type: "string"
        example: "Presenter"
    title: "PersonInvolved"
    description: "A Person working for the Association"
    example:
      birthday: "31-05-1990"
      img: "/pictures/ginomirtino"
      role: "apprentice cook"
      gender: "male"
      phone: "3249412355"
      surname: "Mirtino"
      name: "Gino"
      description: "apprentice cook, trying to help during the cooking events"
      id: 6
      email: "gino@gmail.com"
      is_founder: false
      commitment_type: "Presenter"
  Sponsor:
    type: "object"
    required:
    - "company"
    - "name"
    properties:
      name:
        type: "string"
        example: "Barilla"
      company:
        type: "integer"
        example: "Barilla s.p.a."
      img:
        type: "string"
        example: "/pictures/barilla"
      description:
        type: "string"
        example: "An Italian multinational food company, which is the world's largest\
          \ pasta producer."
    title: "Sponsor"
    description: "that makes donations to support Events"
    example:
      img: "/pictures/barilla"
      name: "Barilla"
      description: "An Italian multinational food company, which is the world's largest\
        \ pasta producer."
      company: "Barilla s.p.a."